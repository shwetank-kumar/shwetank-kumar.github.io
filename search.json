[
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog",
    "section": "",
    "text": "The Great Data Famine: Why the AI that Ate the Web Is Still Starving\n\n\n\n\n\n\ngenai\n\n\nstrategy\n\n\ninvestment\n\n\n\n\n\n\n\n\n\nSep 24, 2024\n\n\nShwetank Kumar\n\n\n\n\n\n\n\n\n\n\n\n\nThe Surprisingly Lucrative Journey of Bootstrapping a Brand Recommender System: From Chaos to Cash\n\n\n\n\n\n\nrecommenders\n\n\ncode\n\n\n\n\n\n\n\n\n\nAug 24, 2024\n\n\nShwetank Kumar\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "favorite-eggheads.html",
    "href": "favorite-eggheads.html",
    "title": "Shwetank Kumar",
    "section": "",
    "text": "AI tutorials - Andrej Karpathy\nPublic company valuations - Ashwath Damodaran\nFinancial systems - Patrick McKenzie"
  },
  {
    "objectID": "favorite-eggheads.html#favorite-topics-and-experts",
    "href": "favorite-eggheads.html#favorite-topics-and-experts",
    "title": "Shwetank Kumar",
    "section": "",
    "text": "AI tutorials - Andrej Karpathy\nPublic company valuations - Ashwath Damodaran\nFinancial systems - Patrick McKenzie"
  },
  {
    "objectID": "posts/cold-start/index.html",
    "href": "posts/cold-start/index.html",
    "title": "The Surprisingly Lucrative Journey of Bootstrapping a Brand Recommender System: From Chaos to Cash",
    "section": "",
    "text": "While everyone seems captivated by AGI and busy building Just-Another-Chatbot (JACTM), they’re overlooking the real problems that can be solved (and the money to be made) through practical ML Engineering. In this inaugural series of blog posts, I’ll dive deep into one such problem: bootstrapping and building a brand recommender system from the ground up. Drawing from my experience as an engineer, executive, and consultant across multiple consumer tech companies and marketplaces, I’ll guide you through the process of creating a recommendation engine that not only predicts customer preferences but also enhances their overall shopping experience.\nWe’ll explore the journey from raw data to a sophisticated system that can significantly boost your bottom line while offering your customers a personalized and delightful experience. So, let’s embark on this data-driven adventure and unlock the potential of personalized recommendations in e-commerce. By the end of this series, you’ll have the tools to transform your e-commerce platform into a cash machine that keeps both your customers and CFOs happy."
  },
  {
    "objectID": "posts/cold-start/index.html#the-problem-e-commerce-is-a-jungle-and-your-customers-are-lost",
    "href": "posts/cold-start/index.html#the-problem-e-commerce-is-a-jungle-and-your-customers-are-lost",
    "title": "The Surprisingly Lucrative Journey of Bootstrapping a Brand Recommender System: From Chaos to Cash",
    "section": "The Problem: E-commerce Is a Jungle (And Your Customers Are Lost)",
    "text": "The Problem: E-commerce Is a Jungle (And Your Customers Are Lost)\nImagine you’ve just launched an e-commerce platform. It’s sleek, efficient, and boasts an impressive array of brands. Initially, you’re confident in its success. However, user feedback quickly reveals a common challenge in the e-commerce world:\n\n“I’m overwhelmed by the number of options.”\n“The recommendations don’t seem relevant to my interests.”\n“I can’t find products that match my specific needs.”\n\nThese concerns are not uncommon. In the realm of online retail, the balance between variety and accessibility is crucial. Insufficient options can leave customers feeling limited, while an overabundance can lead to decision fatigue. This phenomenon, often referred to as the “paradox of choice,” can significantly impact user experience and, consequently, your conversion rates.\nThis, my friends, is why a good recommendation system is invaluable. It’s like having a wise, all-knowing friend who gently guides your customers to their next favorite purchase. And today, we’re going to build that friend from scratch."
  },
  {
    "objectID": "posts/cold-start/index.html#step-0-the-oh-crap-we-have-no-data-phase---totally-random-model",
    "href": "posts/cold-start/index.html#step-0-the-oh-crap-we-have-no-data-phase---totally-random-model",
    "title": "The Surprisingly Lucrative Journey of Bootstrapping a Brand Recommender System: From Chaos to Cash",
    "section": "Step 0: The “Oh Crap, We Have No Data” Phase - Totally Random Model",
    "text": "Step 0: The “Oh Crap, We Have No Data” Phase - Totally Random Model\nLet’s start at the beginning (a very good place to start…). You’ve just launched your e-commerce platform. It looks great, it works smoothly, but there’s one big problem: you have no data. Your recommendation system is a blank slate. What do you do?\nTake a deep breath and repeat after me: “Random is better than nothing.” Now, I know what you’re thinking. “But this is just throwing darts blindfolded! How is this helping anyone?” And you’re right, it’s not ideal. But here’s the secret: it’s not about being perfect; it’s about starting the flywheel.\nEvery time a user sees a random recommendation, you’re gathering data. Maybe they ignore it (data point!). Maybe they click on it (data point!). Maybe they buy it (cha-ching and data point!). Every product interaction (or lack thereof) is a breadcrumb that will lead you out of the data desert.\nLet’s whip up a quick Python function to generate random recommendations:\nimport random\n\ndef get_random_recommendations(all_brands, n=5):\n    return random.sample(all_brands, min(n, len(all_brands)))\n\n# Example usage\nall_brands = df['recommending_brand'].unique().tolist()\nprint(get_random_recommendations(all_brands))\nPro tip: While you’re showing random recommendations, make sure you’re logging EVERYTHING. Every view, every click, every purchase. This data will be worth its weight in gold later on. Trust me, future you will thank present you for this foresight. And while you are at it do make sure that the data is high quality. Algorithms are fickle and state of the art on those changes every week – nay day! But poor quality data once logged sets the ceiling on what you can do with it."
  },
  {
    "objectID": "posts/cold-start/index.html#step-1-the-we-have-some-data-but-its-not-about-users-phase---feature-based-clustering-model",
    "href": "posts/cold-start/index.html#step-1-the-we-have-some-data-but-its-not-about-users-phase---feature-based-clustering-model",
    "title": "The Surprisingly Lucrative Journey of Bootstrapping a Brand Recommender System: From Chaos to Cash",
    "section": "Step 1: The “We Have Some Data, But It’s Not About Users” Phase - Feature-Based Clustering Model",
    "text": "Step 1: The “We Have Some Data, But It’s Not About Users” Phase - Feature-Based Clustering Model\nAlright, so you’ve been running your random recommendation engine for a while. You’ve got some sales, you’ve got some brand data, but you still don’t have enough user interaction data to build a proper collaborative filtering system. Don’t worry, we’re going to make lemonade out of these lemons.\nEnter: Feature-Based Clustering.\nNow, gather ’round, because I’m about to share a secret: brands, like people, have personalities. And just like you wouldn’t set up your quiet, bookish friend with your party-animal cousin (trust me, I’ve made that mistake), you shouldn’t be recommending wildly dissimilar brands to your users.\nLet’s create a simple example using K-means clustering. Don’t let the fancy name scare you - it’s just a way of grouping similar things together.\nfrom sklearn.cluster import KMeans\nimport numpy as np\n\n# Example brand features (price, target_age, sportiness)\nbrand_features = {\n    \"Nike\": [80, 25, 9],\n    \"Adidas\": [75, 30, 8],\n    \"Puma\": [60, 28, 7],\n    \"Reebok\": [65, 35, 6],\n    \"Under Armour\": [70, 27, 9],\n    \"New Balance\": [85, 40, 5],\n    \"Asics\": [90, 35, 8],\n    \"Converse\": [55, 22, 3],\n    \"Vans\": [50, 20, 2],\n    \"Skechers\": [45, 45, 4]\n}\n\ndef cluster_brands(brand_features, n_clusters=3):\n    brands = list(brand_features.keys())\n    features = np.array(list(brand_features.values()))\n    \n    kmeans = KMeans(n_clusters=n_clusters, random_state=42)\n    clusters = kmeans.fit_predict(features)\n    \n    brand_clusters = {brand: cluster for brand, cluster in zip(brands, clusters)}\n    return brand_clusters\n\nbrand_clusters = cluster_brands(brand_features)\nprint(brand_clusters)\n\ndef get_cluster_recommendations(purchased_brand, brand_clusters, n=5):\n    cluster = brand_clusters[purchased_brand]\n    cluster_brands = [brand for brand, c in brand_clusters.items() if c == cluster]\n    return random.sample(cluster_brands, min(n, len(cluster_brands)))\n\n# Example usage\npurchased_brand = \"Nike\"\nprint(get_cluster_recommendations(purchased_brand, brand_clusters))\nLet me share a real-world example that illustrates the power of this approach. Back in the day I worked with a startup that had a range of products - everything from $5 friendship bracelets that screamed “summer camp chic” to $500 mid-century modern chairs that whispered “I have a trust fund.” Their recommendation system? About as sophisticated as a Magic 8-Ball with a hangover. It was the digital equivalent of that one clueless sales associate who tries to upsell you a tuxedo when you’re shopping for gym shorts.\nThe result? Their conversion rate was lower than my undergrad GPA (and trust me, that’s saying something). They addressed this by implementing a clustering system based on various product attributes. We’re talking price, category, style, color palette - if it could be quantified, they clustered it. And boom! Faster than you can say “artisanal hand-knitted cat sweater,” their click-through rates went through the roof! Their engineering blog was practically giddy with excitement (in that restrained, data-scientist kind of way) about the boost in overall sales.\nNow a good data science algorithm needs to do at least two things (and definitely the second of these two): 1. It needs needs to improve a KPI - in this case conversions, although it can be anything. (e.g. if you are a Ferengi it will invariably be profits as laid out in the Ferengi Rules of Acquisition) 2. Regardless of whether it does 1. it needs to light the way to how you might improve the KPI in the future.\nIn this case, it wasn’t just the algorithm doing the work automatically, but the entire system we built around it. We maintained a degree of randomness in our recommendations to continue generating new data and learning from it. It’s like saying, “We know you’re interested in vintage decor, but have you considered this modern minimalist piece?” This approach not only serves immediate customer interests but also introduces them to new products they might enjoy. The lesson here? Even a relatively simple clustering approach can significantly improve your recommendation engine. It’s not about having the fanciest algorithm on the block; it’s about understanding your customers and not trying to sell snowshoes to someone shopping for flip-flops. So, whether you’re dealing with luxury items and budget options, or niche products and mainstream goods, remember: cluster wisely, but maintain some variety. Your conversion rates (and your customers) will thank you."
  },
  {
    "objectID": "posts/cold-start/index.html#step-2-the-now-were-cooking-with-gas-phase---purchase-based-association-model",
    "href": "posts/cold-start/index.html#step-2-the-now-were-cooking-with-gas-phase---purchase-based-association-model",
    "title": "The Surprisingly Lucrative Journey of Bootstrapping a Brand Recommender System: From Chaos to Cash",
    "section": "Step 2: The “Now We’re Cooking with Gas” Phase - Purchase-Based Association Model",
    "text": "Step 2: The “Now We’re Cooking with Gas” Phase - Purchase-Based Association Model\nAlright, my data-hungry friends, we’ve arrived at the juicy part. You’ve been diligently collecting user interaction data (you have, haven’t you?), and now it’s time to put it to use. We’re going to build a purchase-based association model.\nThis is where the magic really starts to happen. We’re going to create a system that understands that people who buy brand A often buy brand B, even if we don’t know why. It’s like being a really good matchmaker without understanding the intricacies of human psychology.\nLet’s cook up a simple association model:\nfrom collections import defaultdict\n\ndef build_association_model(purchase_data):\n    associations = defaultdict(lambda: defaultdict(int))\n    for purchase in purchase_data:\n        for i, brand1 in enumerate(purchase):\n            for brand2 in purchase[i+1:]:\n                associations[brand1][brand2] += 1\n                associations[brand2][brand1] += 1\n    return associations\n\n# Example purchase data\npurchase_data = [\n    [\"Nike\", \"Adidas\"],\n    [\"Nike\", \"Under Armour\"],\n    [\"Adidas\", \"Puma\"],\n    [\"Puma\", \"Reebok\"],\n    [\"Nike\", \"Converse\"],\n    [\"Vans\", \"Converse\"],\n    [\"New Balance\", \"Asics\"],\n    [\"Skechers\", \"New Balance\"]\n]\n\nassociation_model = build_association_model(purchase_data)\n\ndef get_associated_brands(brand, association_model, n=5):\n    associated = sorted(association_model[brand].items(), key=lambda x: x[1], reverse=True)\n    return [b for b, _ in associated[:n]]\n\n# Example usage\npurchased_brand = \"Nike\"\nprint(get_associated_brands(purchased_brand, association_model))\nNow, let me tell you why this is a game-changer. Consider the case of Amazon, the e-commerce giant. In their early days, they primarily sold books. But as they expanded into other product categories, they faced a massive challenge: how to effectively cross-sell across these diverse categories? Their solution was to implement a sophisticated association model, much like the one we’ve just built (though admittedly, theirs was far more complex). This “item-to-item collaborative filtering” approach, as they called it, allowed them to say, “Customers who bought this item also bought…”\nThe impact was significant. According to a paper published by Amazon’s engineers in 2003 titled “Amazon.com Recommendations: Item-to-Item Collaborative Filtering”, this recommendation system offered substantial advantages over traditional collaborative filtering techniques as it could:\n\nHandle a massive scale of data - tens of millions of customers and millions of catalog items.\nProduce high-quality recommendations in real-time, scaling well to sudden spikes in traffic.\nRecommend across diverse product categories, from books to electronics to clothing.\n\nWhile the paper doesn’t provide specific sales figures, it does mention that Amazon’s recommendation system significantly improved click-through and conversion rates compared to untargeted content such as top sellers."
  },
  {
    "objectID": "posts/cold-start/index.html#step-3-the-six-degrees-of-kevin-bacon-phase---transitive-association-model",
    "href": "posts/cold-start/index.html#step-3-the-six-degrees-of-kevin-bacon-phase---transitive-association-model",
    "title": "The Surprisingly Lucrative Journey of Bootstrapping a Brand Recommender System: From Chaos to Cash",
    "section": "Step 3: The “Six Degrees of Kevin Bacon” Phase - Transitive Association Model",
    "text": "Step 3: The “Six Degrees of Kevin Bacon” Phase - Transitive Association Model\nEver played “Six Degrees of Kevin Bacon”? Well, we’re about to do something similar with our brands, and it’s going to blow your recommendation socks off.\nDirect associations are great, but they’re limited. What if we could create a web of associations, where brand A is connected to brand B, which is connected to brand C, creating an indirect link between A and C? It’s like being at a party where your network explodes as friends introduce you to their friends.\nBy considering second-order and third-order connections, we can uncover hidden relationships in our data, leading to nuanced and unexpected recommendations. Here’s how to do it in &lt; 10 lines of code:\ndef expand_adjacency_matrix(adj_matrix, max_order=5, weight_factor=0.5):\n    expanded_matrix = adj_matrix.copy()\n    current_matrix = normalize_matrix(adj_matrix)\n\n    for order in range(2, max_order + 1):\n        current_matrix = current_matrix.dot(normalize_matrix(adj_matrix))\n        weighted_connections = current_matrix * (weight_factor ** (order - 1))\n        expanded_matrix += weighted_connections\n\n    return normalize_matrix(expanded_matrix)\nLet’s break this down:\n\nWe start with our original adjacency matrix of direct brand connections.\nWe calculate higher-order connections up to a specified maximum (default 5, because six degrees of separation, right?).\nHere’s the clever bit: we apply a weight factor. Each higher-order connection gets reduced weight because your friend’s friend’s friend’s opinion shouldn’t count as much as your direct friend’s.\nWe add all these weighted connections to our original matrix, creating a rich tapestry of brand relationships.\nFinally, we normalize everything to keep our numbers manageable.\n\nThe result? A supercharged adjacency matrix capturing not just direct relationships, but a whole network of indirect connections.\nNow, imagine a niche online bookstore specializing in obscure academic texts. Their inventory is so specific that direct associations are as rare as a first-edition Gutenberg Bible at a yard sale.\nA customer buys “The Mating Habits of 12th Century Mongolian Horses” (yes, I’m having fun with these titles). In a traditional system, we’d be stuck. But with our transitive associations, we might recommend “The Economic Impact of Horse Trading in Medieval Asia”, even if no one had ever purchased these together. Our system could find a chain of associations linking them through other related books.\nThis approach enables academics to joyfully tumble down rabbit holes of related obscure topics, much to the store owner’s delight. It illustrates the power of transitive associations, especially for businesses with niche catalogs or sparse collaborative filtering matrices. We’re transforming a sparse matrix into a dense one, uncovering “hidden” connections that create a discovery engine to surprise and delight customers, potentially leading them down purchasing paths they never knew existed."
  },
  {
    "objectID": "posts/cold-start/index.html#step-4-fine-tuning-the-magic---hyperparameters-and-evaluation",
    "href": "posts/cold-start/index.html#step-4-fine-tuning-the-magic---hyperparameters-and-evaluation",
    "title": "The Surprisingly Lucrative Journey of Bootstrapping a Brand Recommender System: From Chaos to Cash",
    "section": "Step 4: Fine-Tuning the Magic - Hyperparameters and Evaluation",
    "text": "Step 4: Fine-Tuning the Magic - Hyperparameters and Evaluation\nAlright, data enthusiasts, we’ve built our transitive association model, but now it’s time to give it that extra polish. Think of it as tuning a high-performance engine - we need to adjust the nitrous levels just right.\n\nHyperparameter Tuning: Finding the Sweet Spot\nRemember our expand_adjacency_matrix function? It comes with two key hyperparameters:\n\nmax_order: How far down the rabbit hole of connections we’re willing to go\nweight_factor: Our trust factor for the friend of a friend of a friend\n\nThese aren’t just arbitrary numbers we pulled out of a magician’s hat. They’re the secret sauce that can make or break our recommendations.\nLet’s take a closer look at weight_factor. Set it too high, and you might end up recommending winter parkas to someone shopping for swimwear. Set it too low, and you’re barely scratching the surface of potential connections.\nSo how do we find the Goldilocks zone? Enter: hyperparameter tuning. It’s like finding the perfect recipe, but instead of slurping soup, we’re crunching numbers.\ndef evaluate_model(adj_matrix, test_data, max_order, weight_factor):\n    expanded_matrix = expand_adjacency_matrix(adj_matrix, max_order, weight_factor)\n    return calculate_hit_rate(expanded_matrix, test_data)\n\n# Grid search for best hyperparameters\nbest_score = 0\nbest_params = {}\n\nfor max_order in range(2, 7):\n    for weight_factor in [0.1, 0.3, 0.5, 0.7, 0.9]:\n        score = evaluate_model(train_adj_matrix, test_data, max_order, weight_factor)\n        if score &gt; best_score:\n            best_score = score\n            best_params = {'max_order': max_order, 'weight_factor': weight_factor}\n\nprint(f\"Best parameters: {best_params}\")\nprint(f\"Best score: {best_score}\")\n\n\nModel Evaluation: Separating the Wheat from the Chaff\nNow, how do we know if our model is actually any good? We can’t just take it out for a test drive on the same roads we built it on. That’s where train-test splits come in handy.\nHere’s our game plan:\n\nSplit your data into training and test sets. Think of it as studying for an exam (training) and then taking the final (testing).\nBuild your adjacency matrix using only the training data.\nUse your tuned model to make predictions on the test set.\nCompare your transitive model against simpler approaches, like random recommendations or direct associations only.\n\nLet’s see how it’s done:\ndef compare_models(train_data, test_data):\n    # Build adjacency matrix from train data\n    train_adj_matrix = build_adjacency_matrix(train_data)\n    \n    # Random model (aka \"The Dart Board Approach\")\n    random_score = evaluate_model(random_recommendations, test_data)\n    \n    # Direct associations model (aka \"The One-Track Mind\")\n    direct_score = evaluate_model(train_adj_matrix, test_data)\n    \n    # Transitive model with best hyperparameters (aka \"The Six Degrees of Kevin Bacon\")\n    transitive_score = evaluate_model(\n        expand_adjacency_matrix(train_adj_matrix, **best_params),\n        test_data\n    )\n    \n    print(f\"Random model score: {random_score}\")\n    print(f\"Direct associations score: {direct_score}\")\n    print(f\"Transitive model score: {transitive_score}\")\n\ncompare_models(train_data, test_data)"
  },
  {
    "objectID": "posts/cold-start/index.html#the-secret-sauce-continuous-improvement",
    "href": "posts/cold-start/index.html#the-secret-sauce-continuous-improvement",
    "title": "The Surprisingly Lucrative Journey of Bootstrapping a Brand Recommender System: From Chaos to Cash",
    "section": "The Secret Sauce: Continuous Improvement",
    "text": "The Secret Sauce: Continuous Improvement\nNow, here’s what separates the good recommendation systems from the great ones: continuous improvement. Everything we’ve built so far is just the foundation. The real magic happens when you start iterating and refining.\n\nFine-tune your clustering: As you gather more data, you might discover that certain features are more predictive than others. Don’t hesitate to adjust your approach.\nAdjust association weights: Consider the context of purchases. Perhaps items bought together in the same transaction should carry more weight than those bought by the same customer on different days.\nOptimize hyperparameters: Regularly revisit your max_order and weight_factor settings. As your data grows and evolves, so too should your model’s parameters.\nIncorporate user feedback: If customers consistently ignore certain recommendations, use that information to refine your model.\nA/B test rigorously: Test different versions of your model against each other. Let the data guide your decisions on which approaches work best for your specific use case.\n\nRemember, the goal isn’t perfection - it’s continuous improvement. Aim to build a system that consistently outperforms random chance, and then focus on making it a little better every day.\n\nThe Real-World Impact: Beyond the Numbers\nNow, I won’t give you specific numbers here because, let’s face it, your mileage may vary. But if you’ve done everything right, your transitive model should be outperforming the others like a sports car in a bicycle race. But here’s the real kicker: this isn’t just about better numbers on a spreadsheet. It’s about creating a recommendation system that feels almost eerily intuitive to your customers.\nWhile we’ve covered significant ground in this post, we’ve only scratched the surface of what’s possible. In our next installment, we’ll explore how cutting-edge AI techniques can take our recommendation system to the next level. We’ll delve into methods that can create truly bespoke shopping experiences, predicting not just what a customer might want now, but what they’ll want next. From leveraging deep learning to harnessing the power of contextual bandits, we’ll explore how to create a recommendation engine that doesn’t just react to customer behavior, but anticipates it. It’s the difference between a skilled salesperson and a personal shopping psychic (with a Ph.D. in data science). In the end, that’s what separates a good recommendation system from a great one. It’s not just about predicting what customers want - it’s about inspiring them, delighting them, and yes, maybe even surprising them a little. So go forth, tune those hyperparameters, split that data, and may your conversion rates be ever in your favor!"
  },
  {
    "objectID": "posts/data-scarcity/index.html",
    "href": "posts/data-scarcity/index.html",
    "title": "The Great Data Famine: Why the AI that Ate the Web Is Still Starving",
    "section": "",
    "text": "If you’re a software engineer or data scientist who’s been losing sleep over the Twitter-fueled hysteria that “English is the new coding language,” I’ve got news for you: put down the panic button and step away from the job boards. I am here to tell you that despite what the Twitterverse might have you believe, AI isn’t about to steal your job or create Skynet. And if you’re an exec or investor who thinks otherwise, I’ve got a Nigerian prince who’d love to chat.\nAfter a weekend of wrestling with the latest and supposedly greatest codegen tools, I’ve come to a startling conclusion: our AI overlords aren’t quite ready to steal your job or usher in the age of Skynet. In fact, they’re struggling with tasks that would make a junior dev roll their eyes.\nLet me paint you a picture: There I was, surrounded by caffeine and a stack of AI whitepapers, trying to coax these silicon savants into solving some basic coding problems. It became painfully clear that to tackle even the most fundamental challenges, we’re in desperate need of a quantum leap in LLM complexity.\nWhat we really need is for these models to channel their inner project manager – breaking down problems into bite-sized chunks, crafting plans, and methodically conquering each incremental hurdle. But instead of this sophisticated problem-solving, our current crop of AI tools often resemble a caffeinated squirrel trying to solve a Rubik’s cube – lots of frantic activity, not a lot of progress.\n\n\nRemember when we thought the solution to every AI challenge was simply to make it bigger? It was like Silicon Valley’s version of “supersize me,” but instead of fries, we were supersizing parameters and datasets. Well, folks, that all-you-can-eat buffet of data and compute has reached its limit.\nSince the “Attention is all you need” paper dropped and gave us the Transformer architecture, we’ve been playing a game of “who can build the biggest model?” It’s been like a digital arms race, with each new model flexing more parameters. And for a while, it worked! We fed these hungry, hungry hippos more data, cranked up the parameter count, and watched the benchmarks climb.\nBut now, we’ve hit a wall. A big, data-shaped wall that’s putting a damper on our “bigger is better” party. We’re now facing a trifecta of challenges that even the most optimistic VC can’t hand-wave away:\n\nData Scarcity: We’re scraping the bottom of the digital barrel, and it’s not pretty. Turns out, the internet isn’t infinite after all.\nPower Consumption: Our models are energy gluttons that could outshine Las Vegas. At this rate, we’ll need a small nuclear reactor for each training run.\nSystem Complexity: We’re playing high-stakes Jenga with GPUs, hoping that one wobbly card doesn’t bring down the entire expensive house of silicon (aka cluster).\n\nUnless we see some major breakthroughs in model architecture or how these Large Language Models (LLMs) learn, we’re stuck. Future AI products will be reheating the same capabilities we have today, just with fancier marketing. It’s like we’ve trained our AI to be a really eloquent parrot, but now we need it to write a novel.\nLets explore why our current AI models are perpetually data-starved, uncover the fundamental limitations of our learning approaches (backprop, SGD …), and maybe even find a path forward that doesn’t involve sacrificing our firstborns to the GPU gods. Welcome to the frontlines of the AI data crisis, in the land of diminishing returns – where the future is bright, but the training datasets are running on empty.\n\n\n\nImagine an AI as a toddler with an endless appetite for knowledge. Now, picture that toddler devouring the entire internet and still asking for seconds. That’s our current predicament with Large Language Models (LLMs). These digital gluttons are slow learners with an insatiable hunger for data, and folks, we’re running out of internet to feed them. Who would’ve thought “we’ve run out of internet” would be a legitimate concern in 2024?\n\n\nLet’s dive into a real-world example that’ll make your head spin: Meta’s latest 8B parameter Llama 3.1 model. This digital beast was fed a whopping 15 trillion tokens during training. For those keeping score at home, that’s essentially the entire publicly available internet. The Llama paper [1] claims it’s all public data, but they’re keeping the exact dataset under wraps. The closest we’ve got to peeking behind the curtain is the “Fine Web Dataset” [2] on Hugging Face, tipping the scales at a hefty 44TB.\n\n\n\nNow, if you’ve been following the AI literature like it’s the new Netflix, you might be thinking, “Wait a minute, isn’t that overkill?” And you’d be right - sort of. The Chinchilla paper [3], our previous guidebook for “compute optimal” training, would suggest that an 8B parameter model only needs about 160B tokens. Llama 3.1 ate roughly 100 times that amount!\nBut here’s the kicker: it worked. Meta’s decision to massively overindulge their model led to continued performance improvements. This reveals two mind-bending facts:\n\nMany existing models are actually undernourished by comparison.\nHigh-quality data is the new oil in the AI gold rush.\n\nEven after this data feast, Llama 3.1 hadn’t reached what we’d classically call convergence. It was still improving, like a bottomless pit of potential [4]. This, combined with Microsoft’s Tiny Stories paper [5], is forcing us to rethink the data requirements for training these models.\n\n\n\nAnd now consider the data requirements for 405B parameter version of Llama 3.1. It should ideally be trained on proportionally more data - we’re talking “several internets” worth. But guess what? It was trained on the same 15T tokens as its smaller sibling. If that dataset was barely enough for the 8B model, it’s like trying to feed a blue whale with a goldfish bowl for the 405B version.\n\n\n\nBefore you start stockpiling hard drives and building your own internet, there’s a glimmer of hope. For enterprises sitting on a goldmine of non-public data (that you’re legally allowed to use, of course), you’re in luck. This is your chance to fine-tune these models for specialized tasks and potentially push their performance beyond what’s publicly possible. And for the efficiency enthusiasts out there, there’s still plenty of room to explore knowledge distillation - teaching smaller models to mimic their bigger, data-guzzling cousins.\n\n\n\n\nLlama 3.1’s training reveals that our “well-trained” models might actually be underfed data-wise.\nWe’ve essentially run out of high-quality public data to train these ever-growing models.\nThe next frontier? Leveraging private data to push these models even further.\n\nWelcome to the era of data scarcity in AI - where the models are hungry, the internet is finite, and every byte counts!\n\n\n\n\nWhen faced with data scarcity, researchers and engineers came up with a brilliant idea: Why not leverage AI models to generate their own training data? This concept, far from being a desperate measure, is actually a legitimate and innovative approach to addressing the data hunger of large language models which offers many advantages like unparalleled scalability, solution for privacy preservation in training data, and customization for specialized tasks. However, it also comes with its own set of challenges.\n\n\nThis self-cannibalization of data leads to what’s ominously known as ‘model collapse’. Don’t let the fancy term scare you - it’s simply what happens when your AI goes on a diet of nothing but its own increasingly bland word salad.\nHere’s how it works: the model (or its bigger cousin) generates tokens based on probability distributions so it favors tokens closer to the mean (the “average” outputs) providing fewer examples of tokens out in the wings of the distribution. After a few cycles of generating and training on synthetic data, you lose all the diverse content from the original dataset. Result? Your models over generations lose the brilliance and versatility that would come from diversity and start generating singular, monochromatic data which doesn’t capture the real world anymore.\nIts like making a photocopy of a photocopy - each generation gets blurrier and weirder until you end up with something that looks like it came from a glitchy parallel universe where creativity went to die.\n\n\n\nThe opposite side of the same coin is that any small biases in the initial dataset get amplified out of propostion. So now the slight bias in your dataset is dialed to 11 on a scale of 10 and it thinks the entire world population consists of cat-loving, pizza-eating coders who never see the sun. Diversity? That’s just a myth, like inbox zero or bug-free code.\n\n\n\nValidating synthetic data is like fact-checking a politician’s promises - a Sisyphusean task (i.e. can’t be done, easily anyway). It’s a guessing game where the grand prize is “maybe your AI won’t embarrass itself in public.” And good luck keeping it current - by the time you’ve generated your synthetic data, the real world has moved on, leaving your AI stuck in last season’s trends like a digital fashion faux pas.\n\n\n\nJust when you thought it couldn’t get worse, enter the hackers. Synthetic data is like a new chew toy for cybercriminals. They’re gleefully exploring all the ways they can mess with your data generation process, turning your AI into their personal puppet show.\n\n\n\nBut wait! Don’t despair just yet. One person’s data dilemma is another’s research opportunity. Here are some tantalizing questions for the brave AI researchers of tomorrow:\n\nCan we develop smarter sampling strategies to generate synthetic data from the neglected “wings” of the probability distribution?\nWhat’s the perfect cocktail of real and synthetic data? Is there a golden ratio, or does it depend on the task?\nHow can we build Fort Knox-level security around our synthetic data generation process?\n\n\n\n\n\nSynthetic data is a promising solution to data scarcity, offering scalability, privacy, and customization.\nHowever, it comes with significant challenges: model collapse, bias amplification, quality control issues, and security risks.\nThe future of synthetic data lies in developing better generation strategies, finding optimal real-synthetic data ratios, and creating robust security frameworks.\n\nUntil we crack these problems, synthetic data is the AI world’s equivalent of combating climate change by painting everything green. It looks fantastic in PowerPoint presentations, but step outside, and you’ll find a world of plastic trees where your AI thinks photosynthesis is just the latest Instagram filter.\n\n\n\n\nThe underlying problem that is a root cause of all our AI woes is that neural networks and other architectures using a combination of back propagation and stochastic gradient descent (let’s call these SGD & Progeny Pvt. Ltd. to include other algorithms like Adam, Ada etc.) are slow learners - absorbing knowledge at the speed of continental drift. They’re the Pangaea of machine learning, slowly but inexorably shuffling bits of information around until, eons later, you might just have a functional model. Let’s look at how these work.\n\n\nStochastic Gradient Descent (SGD) and its variants are the cornerstone of modern machine learning optimization techniques. However, their effectiveness is limited by their inherent randomness. It’s basically like trying to find your way out of an IKEA blindfolded by randomly stumbling around, making small adjustments to your trajectory based on very limited local information. You might eventually find the exit, but you’ll bump into a lot of BILLY bookcases along the way.\n\n\n\nNeural networks often get trapped in suboptimal solutions, or “local minima,” during training. To overcome this, we need to expose our models to diverse, high-quality data repeatedly. However, the scale at which this needs to happen is staggering - often requiring millions of iterations. Of course, there are heuristics that can help you along in the process, but coming up with the right set of parameters for training and escaping each minima requires a lot of experimentation with hyperparameters.\n\n\n\nHyperparameter tuning in machine learning is akin to trying to crack a safe with an infinite number of dials. Each parameter - learning rate, batch size, network architecture, etc. - can dramatically affect model performance, yet their interactions are often unpredictable and non-linear. It’s not uncommon for researchers to spend more time tuning hyperparameters than actually training models. This process is often more art than science, relying heavily on intuition, experience, and, frankly, a fair bit of luck.\nAutomated hyperparameter optimization techniques exist, and while helpful, often require significant computational resources and can still miss optimal configurations due to the vast search space. Moreover, hyperparameters that work well for one dataset or task might fail spectacularly on another, making it challenging to develop generalizable best practices.\nThe complexity of hyperparameter tuning also raises questions about the robustness and interpretability of our models. If slight tweaks to these parameters can lead to drastically different results, how can we trust the stability and reliability of our AI systems?\n\n\n\nThese models are turning into the Rain Man of useless information. Great if you need to count toothpicks, not so great for actual intelligence. As these models grow larger, they’re not getting smarter – they’re just getting better at regurgitating what they’ve seen before. It’s like that friend who can recite every line from “The Office” but can’t hold a conversation about anything else.\n\n\n\nData scarcity, which is a direct result of these fundamental limitations, is pushing us towards an inflection point. We can’t just keep making models bigger and feeding them more data. We need to fundamentally rethink how these models learn and generalize. It’s like we’ve been trying to build a skyscraper by just piling up more and more bricks. Now we need to stop and think about architecture, efficiency, and maybe invest in an elevator or two.\nSome promising directions include:\n\nAlgorithms that rely on second-order moments, though they require more memory to store gradients.\nCombining these techniques with simplifying assumptions about the nature of the matrix [7], allowing us to store sparser versions.\nCoupling these approaches with newer execution engines in GPUs for sparse matrices.\nExploring hardware-software co-design as a powerful research direction.\n\n\n\n\n\nDeep networks learn slowly due to limitations in optimization techniques like SGD.\nKey challenges include navigating complex loss landscapes, escaping local minima, tuning hyperparameters, and avoiding mere memorization.\nWe need to rethink our approach to model architecture and learning processes.\nPromising directions include advanced optimization algorithms, sparse matrix techniques, and hardware-software co-design.\n\nRemember, in the world of AI, we’re not just teaching machines to learn – we’re learning how to teach. And right now, we’re realizing we might need to go back to teacher school ourselves.\n\n\n\n\nAs we’ve explored in this article, the challenges facing AI development are numerous and complex. We’ve only scratched the surface of the data scarcity issue, and there are still two major hurdles we haven’t yet discussed: power consumption and system complexity.\nThe energy requirements for training and running these increasingly large AI models are staggering. As we push the boundaries of model size and complexity, we’re also pushing the limits of our computational infrastructure. The power consumption of these models isn’t just a technical issue—it’s an environmental and economic concern that the AI community will need to address.\nSystem complexity is another critical challenge. As our AI systems grow more sophisticated, managing and optimizing them becomes increasingly difficult. We’re rapidly approaching a point where the complexity of these systems may outpace our ability to understand and control them effectively.\nDown the road I intend to delve deeper into these issues, exploring the implications of AI’s growing energy appetite and the challenges posed by increasingly complex systems. In the meanwhile if there are things in this space that you would like to learn about - DMs are always open!\n\nThe Llama 3 Herd of Models\nFineweb dataset\nTraining Compute-Optimal Large Language Models\n@Karpathy\nTinyStories: How Small Can Language Models Be and Still Speak Coherent English?\nIs Model Collapse Inevitable? Breaking the Curse of Recursion by Accumulating Real and Synthetic Data\nShampoo: Preconditioned Stochastic Tensor Optimization"
  },
  {
    "objectID": "posts/data-scarcity/index.html#the-transformer-plateau-when-bigger-isnt-always-better",
    "href": "posts/data-scarcity/index.html#the-transformer-plateau-when-bigger-isnt-always-better",
    "title": "The Great Data Famine: Why the AI that Ate the Web Is Still Starving",
    "section": "",
    "text": "Remember when we thought the solution to every AI challenge was simply to make it bigger? It was like Silicon Valley’s version of “supersize me,” but instead of fries, we were supersizing parameters and datasets. Well, folks, that all-you-can-eat buffet of data and compute has reached its limit.\nSince the “Attention is all you need” paper dropped and gave us the Transformer architecture, we’ve been playing a game of “who can build the biggest model?” It’s been like a digital arms race, with each new model flexing more parameters. And for a while, it worked! We fed these hungry, hungry hippos more data, cranked up the parameter count, and watched the benchmarks climb.\nBut now, we’ve hit a wall. A big, data-shaped wall that’s putting a damper on our “bigger is better” party. We’re now facing a trifecta of challenges that even the most optimistic VC can’t hand-wave away:\n\nData Scarcity: We’re scraping the bottom of the digital barrel, and it’s not pretty. Turns out, the internet isn’t infinite after all.\nPower Consumption: Our models are energy gluttons that could outshine Las Vegas. At this rate, we’ll need a small nuclear reactor for each training run.\nSystem Complexity: We’re playing high-stakes Jenga with GPUs, hoping that one wobbly card doesn’t bring down the entire expensive house of silicon (aka cluster).\n\nUnless we see some major breakthroughs in model architecture or how these Large Language Models (LLMs) learn, we’re stuck. Future AI products will be reheating the same capabilities we have today, just with fancier marketing. It’s like we’ve trained our AI to be a really eloquent parrot, but now we need it to write a novel.\nLets explore why our current AI models are perpetually data-starved, uncover the fundamental limitations of our learning approaches (backprop, SGD …), and maybe even find a path forward that doesn’t involve sacrificing our firstborns to the GPU gods. Welcome to the frontlines of the AI data crisis, in the land of diminishing returns – where the future is bright, but the training datasets are running on empty."
  },
  {
    "objectID": "posts/data-scarcity/index.html#beyond-chinchilla-llama-3.1-and-the-quest-for-more-data",
    "href": "posts/data-scarcity/index.html#beyond-chinchilla-llama-3.1-and-the-quest-for-more-data",
    "title": "The Great Data Famine: Why the AI that Ate the Web Is Still Starving",
    "section": "",
    "text": "Imagine an AI as a toddler with an endless appetite for knowledge. Now, picture that toddler devouring the entire internet and still asking for seconds. That’s our current predicament with Large Language Models (LLMs). These digital gluttons are slow learners with an insatiable hunger for data, and folks, we’re running out of internet to feed them. Who would’ve thought “we’ve run out of internet” would be a legitimate concern in 2024?\n\n\nLet’s dive into a real-world example that’ll make your head spin: Meta’s latest 8B parameter Llama 3.1 model. This digital beast was fed a whopping 15 trillion tokens during training. For those keeping score at home, that’s essentially the entire publicly available internet. The Llama paper [1] claims it’s all public data, but they’re keeping the exact dataset under wraps. The closest we’ve got to peeking behind the curtain is the “Fine Web Dataset” [2] on Hugging Face, tipping the scales at a hefty 44TB.\n\n\n\nNow, if you’ve been following the AI literature like it’s the new Netflix, you might be thinking, “Wait a minute, isn’t that overkill?” And you’d be right - sort of. The Chinchilla paper [3], our previous guidebook for “compute optimal” training, would suggest that an 8B parameter model only needs about 160B tokens. Llama 3.1 ate roughly 100 times that amount!\nBut here’s the kicker: it worked. Meta’s decision to massively overindulge their model led to continued performance improvements. This reveals two mind-bending facts:\n\nMany existing models are actually undernourished by comparison.\nHigh-quality data is the new oil in the AI gold rush.\n\nEven after this data feast, Llama 3.1 hadn’t reached what we’d classically call convergence. It was still improving, like a bottomless pit of potential [4]. This, combined with Microsoft’s Tiny Stories paper [5], is forcing us to rethink the data requirements for training these models.\n\n\n\nAnd now consider the data requirements for 405B parameter version of Llama 3.1. It should ideally be trained on proportionally more data - we’re talking “several internets” worth. But guess what? It was trained on the same 15T tokens as its smaller sibling. If that dataset was barely enough for the 8B model, it’s like trying to feed a blue whale with a goldfish bowl for the 405B version.\n\n\n\nBefore you start stockpiling hard drives and building your own internet, there’s a glimmer of hope. For enterprises sitting on a goldmine of non-public data (that you’re legally allowed to use, of course), you’re in luck. This is your chance to fine-tune these models for specialized tasks and potentially push their performance beyond what’s publicly possible. And for the efficiency enthusiasts out there, there’s still plenty of room to explore knowledge distillation - teaching smaller models to mimic their bigger, data-guzzling cousins.\n\n\n\n\nLlama 3.1’s training reveals that our “well-trained” models might actually be underfed data-wise.\nWe’ve essentially run out of high-quality public data to train these ever-growing models.\nThe next frontier? Leveraging private data to push these models even further.\n\nWelcome to the era of data scarcity in AI - where the models are hungry, the internet is finite, and every byte counts!"
  },
  {
    "objectID": "posts/data-scarcity/index.html#synthetic-data-ais-infinite-mirror-of-confusion",
    "href": "posts/data-scarcity/index.html#synthetic-data-ais-infinite-mirror-of-confusion",
    "title": "The Great Data Famine: Why the AI that Ate the Web Is Still Starving",
    "section": "",
    "text": "When faced with data scarcity, researchers and engineers came up with a brilliant idea: Why not leverage AI models to generate their own training data? This concept, far from being a desperate measure, is actually a legitimate and innovative approach to addressing the data hunger of large language models which offers many advantages like unparalleled scalability, solution for privacy preservation in training data, and customization for specialized tasks. However, it also comes with its own set of challenges.\n\n\nThis self-cannibalization of data leads to what’s ominously known as ‘model collapse’. Don’t let the fancy term scare you - it’s simply what happens when your AI goes on a diet of nothing but its own increasingly bland word salad.\nHere’s how it works: the model (or its bigger cousin) generates tokens based on probability distributions so it favors tokens closer to the mean (the “average” outputs) providing fewer examples of tokens out in the wings of the distribution. After a few cycles of generating and training on synthetic data, you lose all the diverse content from the original dataset. Result? Your models over generations lose the brilliance and versatility that would come from diversity and start generating singular, monochromatic data which doesn’t capture the real world anymore.\nIts like making a photocopy of a photocopy - each generation gets blurrier and weirder until you end up with something that looks like it came from a glitchy parallel universe where creativity went to die.\n\n\n\nThe opposite side of the same coin is that any small biases in the initial dataset get amplified out of propostion. So now the slight bias in your dataset is dialed to 11 on a scale of 10 and it thinks the entire world population consists of cat-loving, pizza-eating coders who never see the sun. Diversity? That’s just a myth, like inbox zero or bug-free code.\n\n\n\nValidating synthetic data is like fact-checking a politician’s promises - a Sisyphusean task (i.e. can’t be done, easily anyway). It’s a guessing game where the grand prize is “maybe your AI won’t embarrass itself in public.” And good luck keeping it current - by the time you’ve generated your synthetic data, the real world has moved on, leaving your AI stuck in last season’s trends like a digital fashion faux pas.\n\n\n\nJust when you thought it couldn’t get worse, enter the hackers. Synthetic data is like a new chew toy for cybercriminals. They’re gleefully exploring all the ways they can mess with your data generation process, turning your AI into their personal puppet show.\n\n\n\nBut wait! Don’t despair just yet. One person’s data dilemma is another’s research opportunity. Here are some tantalizing questions for the brave AI researchers of tomorrow:\n\nCan we develop smarter sampling strategies to generate synthetic data from the neglected “wings” of the probability distribution?\nWhat’s the perfect cocktail of real and synthetic data? Is there a golden ratio, or does it depend on the task?\nHow can we build Fort Knox-level security around our synthetic data generation process?\n\n\n\n\n\nSynthetic data is a promising solution to data scarcity, offering scalability, privacy, and customization.\nHowever, it comes with significant challenges: model collapse, bias amplification, quality control issues, and security risks.\nThe future of synthetic data lies in developing better generation strategies, finding optimal real-synthetic data ratios, and creating robust security frameworks.\n\nUntil we crack these problems, synthetic data is the AI world’s equivalent of combating climate change by painting everything green. It looks fantastic in PowerPoint presentations, but step outside, and you’ll find a world of plastic trees where your AI thinks photosynthesis is just the latest Instagram filter."
  },
  {
    "objectID": "posts/data-scarcity/index.html#deep-networks-are-slow-learners",
    "href": "posts/data-scarcity/index.html#deep-networks-are-slow-learners",
    "title": "The Great Data Famine: Why the AI that Ate the Web Is Still Starving",
    "section": "",
    "text": "The underlying problem that is a root cause of all our AI woes is that neural networks and other architectures using a combination of back propagation and stochastic gradient descent (let’s call these SGD & Progeny Pvt. Ltd. to include other algorithms like Adam, Ada etc.) are slow learners - absorbing knowledge at the speed of continental drift. They’re the Pangaea of machine learning, slowly but inexorably shuffling bits of information around until, eons later, you might just have a functional model. Let’s look at how these work.\n\n\nStochastic Gradient Descent (SGD) and its variants are the cornerstone of modern machine learning optimization techniques. However, their effectiveness is limited by their inherent randomness. It’s basically like trying to find your way out of an IKEA blindfolded by randomly stumbling around, making small adjustments to your trajectory based on very limited local information. You might eventually find the exit, but you’ll bump into a lot of BILLY bookcases along the way.\n\n\n\nNeural networks often get trapped in suboptimal solutions, or “local minima,” during training. To overcome this, we need to expose our models to diverse, high-quality data repeatedly. However, the scale at which this needs to happen is staggering - often requiring millions of iterations. Of course, there are heuristics that can help you along in the process, but coming up with the right set of parameters for training and escaping each minima requires a lot of experimentation with hyperparameters.\n\n\n\nHyperparameter tuning in machine learning is akin to trying to crack a safe with an infinite number of dials. Each parameter - learning rate, batch size, network architecture, etc. - can dramatically affect model performance, yet their interactions are often unpredictable and non-linear. It’s not uncommon for researchers to spend more time tuning hyperparameters than actually training models. This process is often more art than science, relying heavily on intuition, experience, and, frankly, a fair bit of luck.\nAutomated hyperparameter optimization techniques exist, and while helpful, often require significant computational resources and can still miss optimal configurations due to the vast search space. Moreover, hyperparameters that work well for one dataset or task might fail spectacularly on another, making it challenging to develop generalizable best practices.\nThe complexity of hyperparameter tuning also raises questions about the robustness and interpretability of our models. If slight tweaks to these parameters can lead to drastically different results, how can we trust the stability and reliability of our AI systems?\n\n\n\nThese models are turning into the Rain Man of useless information. Great if you need to count toothpicks, not so great for actual intelligence. As these models grow larger, they’re not getting smarter – they’re just getting better at regurgitating what they’ve seen before. It’s like that friend who can recite every line from “The Office” but can’t hold a conversation about anything else.\n\n\n\nData scarcity, which is a direct result of these fundamental limitations, is pushing us towards an inflection point. We can’t just keep making models bigger and feeding them more data. We need to fundamentally rethink how these models learn and generalize. It’s like we’ve been trying to build a skyscraper by just piling up more and more bricks. Now we need to stop and think about architecture, efficiency, and maybe invest in an elevator or two.\nSome promising directions include:\n\nAlgorithms that rely on second-order moments, though they require more memory to store gradients.\nCombining these techniques with simplifying assumptions about the nature of the matrix [7], allowing us to store sparser versions.\nCoupling these approaches with newer execution engines in GPUs for sparse matrices.\nExploring hardware-software co-design as a powerful research direction.\n\n\n\n\n\nDeep networks learn slowly due to limitations in optimization techniques like SGD.\nKey challenges include navigating complex loss landscapes, escaping local minima, tuning hyperparameters, and avoiding mere memorization.\nWe need to rethink our approach to model architecture and learning processes.\nPromising directions include advanced optimization algorithms, sparse matrix techniques, and hardware-software co-design.\n\nRemember, in the world of AI, we’re not just teaching machines to learn – we’re learning how to teach. And right now, we’re realizing we might need to go back to teacher school ourselves."
  },
  {
    "objectID": "posts/data-scarcity/index.html#conclusion-the-tip-of-the-ai-iceberg",
    "href": "posts/data-scarcity/index.html#conclusion-the-tip-of-the-ai-iceberg",
    "title": "The Great Data Famine: Why the AI that Ate the Web Is Still Starving",
    "section": "",
    "text": "As we’ve explored in this article, the challenges facing AI development are numerous and complex. We’ve only scratched the surface of the data scarcity issue, and there are still two major hurdles we haven’t yet discussed: power consumption and system complexity.\nThe energy requirements for training and running these increasingly large AI models are staggering. As we push the boundaries of model size and complexity, we’re also pushing the limits of our computational infrastructure. The power consumption of these models isn’t just a technical issue—it’s an environmental and economic concern that the AI community will need to address.\nSystem complexity is another critical challenge. As our AI systems grow more sophisticated, managing and optimizing them becomes increasingly difficult. We’re rapidly approaching a point where the complexity of these systems may outpace our ability to understand and control them effectively.\nDown the road I intend to delve deeper into these issues, exploring the implications of AI’s growing energy appetite and the challenges posed by increasingly complex systems. In the meanwhile if there are things in this space that you would like to learn about - DMs are always open!\n\nThe Llama 3 Herd of Models\nFineweb dataset\nTraining Compute-Optimal Large Language Models\n@Karpathy\nTinyStories: How Small Can Language Models Be and Still Speak Coherent English?\nIs Model Collapse Inevitable? Breaking the Curse of Recursion by Accumulating Real and Synthetic Data\nShampoo: Preconditioned Stochastic Tensor Optimization"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Shwetank Kumar",
    "section": "",
    "text": "I’m a physicist, engineering exec, investor. Here’s my story:\n\nBorn and raised in NCR, India. Delhi native, I live in SF.\nGot hooked on science early, did my B.Tech in EE from IIT, PhD in Applied Physics from Caltech.\nLearned business by working at startups for 10+ years and getting MBA at Wharton.\nI founded a bootstrapped company to help data teams optimize their Snowflake spend.\nI enjoy building stuff for internet and physical systems using data and AI games."
  },
  {
    "objectID": "index.html#personal-info-in-a-nutshell",
    "href": "index.html#personal-info-in-a-nutshell",
    "title": "Shwetank Kumar",
    "section": "",
    "text": "I’m a physicist, engineering exec, investor. Here’s my story:\n\nBorn and raised in NCR, India. Delhi native, I live in SF.\nGot hooked on science early, did my B.Tech in EE from IIT, PhD in Applied Physics from Caltech.\nLearned business by working at startups for 10+ years and getting MBA at Wharton.\nI founded a bootstrapped company to help data teams optimize their Snowflake spend.\nI enjoy building stuff for internet and physical systems using data and AI games."
  },
  {
    "objectID": "index.html#some-things-ive-done",
    "href": "index.html#some-things-ive-done",
    "title": "Shwetank Kumar",
    "section": "Some things I’ve done",
    "text": "Some things I’ve done\n\nBuilt AI systems that crunch petabytes of data across image, text, and tabular formats.\nScaled these systems to serve millions of customers simultaneously 1, 2.\nCreated systems that use neural networks to analyze satellite imagery at planet scale.\nLed teams of 120+ brilliant minds in data science, engineering, and analytics."
  },
  {
    "objectID": "index.html#tech-i-love-working-with",
    "href": "index.html#tech-i-love-working-with",
    "title": "Shwetank Kumar",
    "section": "Tech I love working with:",
    "text": "Tech I love working with:\n\nPyTorch, Hugging Face, Langchain, Pydantic\nGCP, Snowflake, Bigquery\nAnything that pushes the boundaries of what’s possible with data"
  },
  {
    "objectID": "index.html#investing",
    "href": "index.html#investing",
    "title": "Shwetank Kumar",
    "section": "Investing:",
    "text": "Investing:\n\nMy current areas of interest are: AI, infrastructure, open source, physical systems / frontier tech.\nSome companies I have invested in - Comet, Startree, Inference, Nimble, Turnstile, Dandelion…\nI am a founding member and part of the steering committee at Invest in Data where I co-invest with a group of ~50 other Data execs.\nWe vet and invest on a quarterly cadence. If you have an exciting AI project or a game-changing startup idea? Let’s talk: shwetank.kumar@gmail.com."
  },
  {
    "objectID": "index.html#where-you-can-find-me",
    "href": "index.html#where-you-can-find-me",
    "title": "Shwetank Kumar",
    "section": "Where you can find me:",
    "text": "Where you can find me:\n\nWriting about AI musings, tech & leadership, and data science on this blog\nSharing insights on LinkedIn\nTinkering with code on GitHub\nSpeaking on panels about the future of AI and data"
  }
]