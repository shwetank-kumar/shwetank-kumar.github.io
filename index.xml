<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Shwetank Kumar</title>
<link>https://shwetank-kumar.github.io/</link>
<atom:link href="https://shwetank-kumar.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>Shwetank Kumar&#39;s personal website</description>
<generator>quarto-1.5.56</generator>
<lastBuildDate>Sat, 24 Aug 2024 07:00:00 GMT</lastBuildDate>
<item>
  <title>How to augment that recommender system using sequence modeling</title>
  <dc:creator>Shwetank Kumar</dc:creator>
  <link>https://shwetank-kumar.github.io/posts/sequence-model/</link>
  <description><![CDATA[ 





<p>Talk about why recommender system does not work. It takes no account of purchase history and if you just purchased shoes it doesnt show socks to go along with just more shoes.</p>



 ]]></description>
  <category>recommenders</category>
  <category>code</category>
  <guid>https://shwetank-kumar.github.io/posts/sequence-model/</guid>
  <pubDate>Sat, 24 Aug 2024 07:00:00 GMT</pubDate>
  <media:content url="https://shwetank-kumar.github.io/posts/sequence-model/image.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>The Surprisingly Lucrative Journey of Bootstrapping a Brand Recommender System: From Chaos to Cash</title>
  <dc:creator>Shwetank Kumar</dc:creator>
  <link>https://shwetank-kumar.github.io/posts/cold-start/</link>
  <description><![CDATA[ 





<p>Hey there fellow data scientists! Grab a cup of your favorite caffeinated beverage (I’m on my third espresso as I write this), and let’s dive into the world of recommendation systems. But not just any recommendation systems - we’re talking about bootstrapping a brand recommender from absolutely nothing to a money-printing machine. Buckle up, because this is going to be a wild ride through the land of data, algorithms, and unexpectedly delightful customer experiences.</p>
<section id="the-problem-e-commerce-is-a-jungle-and-your-customers-are-lost" class="level2">
<h2 class="anchored" data-anchor-id="the-problem-e-commerce-is-a-jungle-and-your-customers-are-lost">The Problem: E-commerce Is a Jungle (And Your Customers Are Lost)</h2>
<p>Picture this: You’ve just launched your e-commerce platform. It’s beautiful, it’s fast, and it’s got more brands than you can shake a stick at. You’re feeling pretty good about yourself. But then reality hits you like a ton of bricks wrapped in user feedback forms:</p>
<p>“I can’t find anything I like!” “There are too many options!” “Why are you showing me diving equipment? I live in a desert!” “I just bought shoes! Why are you showing me more shoes!”</p>
<p>Sound familiar? If it doesn’t yet, trust me, it will. You see, in the world of e-commerce, choice is both a blessing and a curse. Too little choice, and customers feel constrained. Too much choice, and they feel overwhelmed. It’s like being a kid in a candy store, except the candy store is the size of a Walmart, and the kid has analysis paralysis.</p>
<p>This, my friends, is where a good recommendation system comes in. It’s like having a wise, all-knowing friend who gently guides your customers to their next favorite purchase. And today, we’re going to build that friend from scratch.</p>
</section>
<section id="step-0-the-oh-crap-we-have-no-data-phase" class="level2">
<h2 class="anchored" data-anchor-id="step-0-the-oh-crap-we-have-no-data-phase">Step 0: The “Oh Crap, We Have No Data” Phase</h2>
<p>Let’s start at the very beginning (a very good place to start, as Julie Andrews would say). You’ve just launched your platform, and your data cupboard is as bare as Old Mother Hubbard’s. What do you do?</p>
<p>Well, first, take a deep breath. Now, repeat after me: “Random is better than nothing.”</p>
<p>You see, when you have no data, your best friend is Mr.&nbsp;Random. It’s not ideal, but it’s a start. And in the world of startups, starting is half the battle.</p>
<p>Let’s whip up a quick Python function to generate random recommendations:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_random_recommendations(all_brands, n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb1-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> random.sample(all_brands, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(n, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(all_brands)))</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example usage</span></span>
<span id="cb1-7">all_brands <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Nike"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adidas"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Puma"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Reebok"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Under Armour"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"New Balance"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Asics"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Converse"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Vans"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Skechers"</span>]</span>
<span id="cb1-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(get_random_recommendations(all_brands))</span></code></pre></div>
<p>Now, I know what you’re thinking. “But dude! This is just throwing darts blindfolded! How is this helping anyone?” Two things - 1) That’s Dr.&nbsp;Mr.&nbsp;Dude! Dude is my 8 year old. 2) And you’re right, it’s not ideal. But here’s the secret: it’s not about being perfect; it’s about starting the flywheel.</p>
<p>Every time a user sees a random recommendation, you’re gathering data. Maybe they ignore it (data point!). Maybe they click on it (data point!). Maybe they buy it (cha-ching and data point!). Every interaction is a breadcrumb that will lead you out of the data desert.</p>
<p>Pro tip: While you’re showing random recommendations, make sure you’re logging EVERYTHING. Every view, every click, every purchase. This data will be worth its weight in gold later on. Trust me, future you will thank present you for this foresight. And while you are at it do make sure that the data is high quality. Algorithms are fickle and state of the art on those changes every week – nay day! But poor quality data once logged sets the ceiling on what you can do.</p>
</section>
<section id="step-1-the-we-have-some-data-but-its-not-about-users-phase" class="level2">
<h2 class="anchored" data-anchor-id="step-1-the-we-have-some-data-but-its-not-about-users-phase">Step 1: The “We Have Some Data, But It’s Not About Users” Phase</h2>
<p>Alright, so you’ve been running your random recommendation engine for a while. You’ve got some sales, you’ve got some brand data, but you still don’t have enough user interaction data to build a proper collaborative filtering system. Don’t worry, we’re going to make lemonade out of these lemons.</p>
<p>Enter: Feature-Based Clustering.</p>
<p>Now, gather ’round, because I’m about to share a secret that took me embarrassingly long to figure out: brands, like people, have personalities. And just like you wouldn’t set up your quiet, bookish friend with your party-animal cousin (trust me, I’ve made that mistake), you shouldn’t be recommending wildly dissimilar brands to your users.</p>
<p>Let’s create a simple example using K-means clustering. Don’t let the fancy name scare you - it’s just a way of grouping similar things together.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.cluster <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> KMeans</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example brand features (price, target_age, sportiness)</span></span>
<span id="cb2-5">brand_features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb2-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Nike"</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>],</span>
<span id="cb2-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adidas"</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>],</span>
<span id="cb2-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Puma"</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>],</span>
<span id="cb2-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Reebok"</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>],</span>
<span id="cb2-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Under Armour"</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>],</span>
<span id="cb2-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"New Balance"</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>],</span>
<span id="cb2-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Asics"</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>],</span>
<span id="cb2-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Converse"</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">55</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>],</span>
<span id="cb2-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Vans"</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],</span>
<span id="cb2-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Skechers"</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span>
<span id="cb2-16">}</span>
<span id="cb2-17"></span>
<span id="cb2-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> cluster_brands(brand_features, n_clusters<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>):</span>
<span id="cb2-19">    brands <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(brand_features.keys())</span>
<span id="cb2-20">    features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(brand_features.values()))</span>
<span id="cb2-21">    </span>
<span id="cb2-22">    kmeans <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> KMeans(n_clusters<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_clusters, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb2-23">    clusters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kmeans.fit_predict(features)</span>
<span id="cb2-24">    </span>
<span id="cb2-25">    brand_clusters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {brand: cluster <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> brand, cluster <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(brands, clusters)}</span>
<span id="cb2-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> brand_clusters</span>
<span id="cb2-27"></span>
<span id="cb2-28">brand_clusters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cluster_brands(brand_features)</span>
<span id="cb2-29"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(brand_clusters)</span>
<span id="cb2-30"></span>
<span id="cb2-31"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_cluster_recommendations(purchased_brand, brand_clusters, n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb2-32">    cluster <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> brand_clusters[purchased_brand]</span>
<span id="cb2-33">    cluster_brands <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [brand <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> brand, c <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> brand_clusters.items() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> cluster]</span>
<span id="cb2-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> random.sample(cluster_brands, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(n, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(cluster_brands)))</span>
<span id="cb2-35"></span>
<span id="cb2-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example usage</span></span>
<span id="cb2-37">purchased_brand <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Nike"</span></span>
<span id="cb2-38"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(get_cluster_recommendations(purchased_brand, brand_clusters))</span></code></pre></div>
<section id="story-1" class="level3">
<h3 class="anchored" data-anchor-id="story-1">Story 1</h3>
<p>[Now, let me tell you a story. I once worked with a client who sold both high-end designer shoes and budget-friendly sneakers. They were using a random recommendation engine, and you know what happened? They were recommending $1000 Italian leather loafers to college students looking for $30 canvas sneakers. Their bounce rate was through the roof, and their conversion rate was lower than my undergrad GPA.]</p>
<p>We implemented this simple clustering system, and boom! Conversion rates jumped by … umm I am under NDA so cant quote the exact number … but lets say XXXX basis points almost overnight. Why? Because we were no longer trying to sell apples to orange lovers. We were showing people more of what they already liked.</p>
</section>
<section id="story-2" class="level3">
<h3 class="anchored" data-anchor-id="story-2">Story 2</h3>
<p>Now, let me share an interesting case study that illustrates the power of this approach. Back in 2015, Etsy, the e-commerce website focused on handmade or vintage items, faced a challenge similar to our hypothetical scenario. They had a vast array of products, from $5 handmade bracelets to $500 vintage furniture pieces. Initially, their recommendation system was quite basic, often suggesting items that were wildly different in style and price point from what a user was viewing. This led to a poor user experience and missed sales opportunities. Etsy’s data science team implemented a more sophisticated system that clustered items based on various features like price, category, style, and even color palette. The result? According to their engineering blog, they saw a significant increase in click-through rates on recommended items and a boost in overall sales. This just goes to show that even a relatively simple clustering approach can have a dramatic impact on your recommendation quality and, ultimately, your bottom line.</p>
<p>But here’s the kicker: we were still maintaining an element of randomness within each cluster. This is crucial because it allows you to continue exploring the possibility space. You’re not just preaching to the choir; you’re introducing the choir to new hymns they might enjoy.</p>
</section>
</section>
<section id="step-2-the-now-were-cooking-with-gas-phase" class="level2">
<h2 class="anchored" data-anchor-id="step-2-the-now-were-cooking-with-gas-phase">Step 2: The “Now We’re Cooking with Gas” Phase</h2>
<p>Alright, my data-hungry friends, we’ve arrived at the juicy part. You’ve been diligently collecting user interaction data (you have, haven’t you?), and now it’s time to put it to use. We’re going to build a purchase-based association model.</p>
<p>This is where the magic really starts to happen. We’re going to create a system that understands that people who buy brand A often buy brand B, even if we don’t know why. It’s like being a really good matchmaker without understanding the intricacies of human psychology.</p>
<p>Let’s cook up a simple association model:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> defaultdict</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> build_association_model(purchase_data):</span>
<span id="cb3-4">    associations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> defaultdict(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span>: defaultdict(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>))</span>
<span id="cb3-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> purchase <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> purchase_data:</span>
<span id="cb3-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, brand1 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(purchase):</span>
<span id="cb3-7">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> brand2 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> purchase[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]:</span>
<span id="cb3-8">                associations[brand1][brand2] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-9">                associations[brand2][brand1] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> associations</span>
<span id="cb3-11"></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example purchase data</span></span>
<span id="cb3-13">purchase_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb3-14">    [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Nike"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adidas"</span>],</span>
<span id="cb3-15">    [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Nike"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Under Armour"</span>],</span>
<span id="cb3-16">    [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adidas"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Puma"</span>],</span>
<span id="cb3-17">    [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Puma"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Reebok"</span>],</span>
<span id="cb3-18">    [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Nike"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Converse"</span>],</span>
<span id="cb3-19">    [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Vans"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Converse"</span>],</span>
<span id="cb3-20">    [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"New Balance"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Asics"</span>],</span>
<span id="cb3-21">    [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Skechers"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"New Balance"</span>]</span>
<span id="cb3-22">]</span>
<span id="cb3-23"></span>
<span id="cb3-24">association_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> build_association_model(purchase_data)</span>
<span id="cb3-25"></span>
<span id="cb3-26"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_associated_brands(brand, association_model, n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb3-27">    associated <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(association_model[brand].items(), key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb3-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> [b <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> b, _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> associated[:n]]</span>
<span id="cb3-29"></span>
<span id="cb3-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example usage</span></span>
<span id="cb3-31">purchased_brand <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Nike"</span></span>
<span id="cb3-32"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(get_associated_brands(purchased_brand, association_model))</span></code></pre></div>
<section id="story-1-1" class="level3">
<h3 class="anchored" data-anchor-id="story-1-1">Story 1</h3>
<p>Now, let me tell you why this is a game-changer. Sometime back, I was consulting for a mid-sized fashion retailer. They were struggling to cross-sell effectively. Their method was to have their merchandisers manually create “outfits” and recommend items based on those.</p>
<p>It was a nightmare. It didn’t scale, it was biased towards the merchandisers’ personal tastes, and it completely missed unexpected associations.</p>
<p>We implemented a system similar to this, and do you know what we found? People who bought red sneakers often bought black hoodies. Why? We had no idea. But it worked. Cross-sell revenue increased by 23% in the first month.</p>
</section>
<section id="story-2-1" class="level3">
<h3 class="anchored" data-anchor-id="story-2-1">Story 2</h3>
<p>Now, let me tell you why this is a game-changer. Consider the case of Amazon, the e-commerce giant. In their early days, they primarily sold books. But as they expanded into other product categories, they faced a massive challenge: how to effectively cross-sell across these diverse categories? Their solution was to implement a sophisticated association model, much like the one we’ve just built (though admittedly, theirs was far more complex). This “item-to-item collaborative filtering” approach, as they called it, allowed them to say, “Customers who bought this item also bought…” The impact was staggering. According to a paper published by Amazon’s engineers, this recommendation system was responsible for 35% of their sales (as of 2013). That’s the power of understanding and leveraging purchase associations. But here’s where it gets really interesting. We’re not just creating direct associations. Oh no, we’re going to take this to the next level with transitive associations.</p>
<p>But here’s where it gets really interesting. We’re not just creating direct associations. Oh no, we’re going to take this to the next level with transitive associations.</p>
</section>
</section>
<section id="step-3-the-six-degrees-of-kevin-bacon-phase" class="level2">
<h2 class="anchored" data-anchor-id="step-3-the-six-degrees-of-kevin-bacon-phase">Step 3: The “Six Degrees of Kevin Bacon” Phase</h2>
<p>Alright, pop culture reference time. Have you ever played “Six Degrees of Kevin Bacon”? The game where you try to connect any actor to Kevin Bacon through no more than six movie connections? Well, we’re going to do something similar with our brands.</p>
<p>You see, direct associations are great, but they’re limited. What if we could create a web of associations, where brand A is connected to brand B, which is connected to brand C, creating an indirect connection between A and C?</p>
<p>This is where transitive associations come in. It’s like being at a party and having your friend introduce you to their friend, who then introduces you to their friend. Suddenly, your network has exploded.</p>
<p>Let’s enhance our association model:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> build_transitive_associations(direct_associations, depth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>):</span>
<span id="cb4-2">    transitive <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> defaultdict(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span>: defaultdict(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>))</span>
<span id="cb4-3">    </span>
<span id="cb4-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> brand <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> direct_associations:</span>
<span id="cb4-5">        queue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(brand, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)]</span>
<span id="cb4-6">        visited <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>()</span>
<span id="cb4-7">        </span>
<span id="cb4-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> queue:</span>
<span id="cb4-9">            current, level <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> queue.pop(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-10">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> level <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> depth:</span>
<span id="cb4-11">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb4-12">            </span>
<span id="cb4-13">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> current <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> visited:</span>
<span id="cb4-14">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span>
<span id="cb4-15">            visited.add(current)</span>
<span id="cb4-16">            </span>
<span id="cb4-17">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> associated, strength <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> direct_associations[current].items():</span>
<span id="cb4-18">                transitive[brand][associated] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> strength <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> level)</span>
<span id="cb4-19">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> associated <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> visited:</span>
<span id="cb4-20">                    queue.append((associated, level <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb4-21">    </span>
<span id="cb4-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> transitive</span>
<span id="cb4-23"></span>
<span id="cb4-24">transitive_associations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> build_transitive_associations(association_model)</span>
<span id="cb4-25"></span>
<span id="cb4-26"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_transitive_recommendations(brand, transitive_associations, n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb4-27">    associated <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(transitive_associations[brand].items(), key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> [b <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> b, _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> associated[:n] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> brand]</span>
<span id="cb4-29"></span>
<span id="cb4-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example usage</span></span>
<span id="cb4-31">purchased_brand <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Nike"</span></span>
<span id="cb4-32"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(get_transitive_recommendations(purchased_brand, transitive_associations))</span></code></pre></div>
<p>Now, let me tell you why this is so powerful. I once worked with a niche bookstore. They specialized in obscure academic texts. The problem was, their inventory was so specific that direct associations were rare. A customer might buy a book on “The Mating Habits of 12th Century Mongolian Horses” (I’m not making this up), but how many other people are going to buy that exact book?</p>
<p>We implemented transitive associations, and suddenly, magic happened. We could recommend “The Economic Impact of Horse Trading in Medieval Asia” to someone who bought the Mongolian horse book, even if no one had ever bought these two books together. Why? Because there was a chain of associations linking them.</p>
<p>The result? A 40% increase in average order value. Turns out, academics love going down rabbit holes. Who knew?</p>
</section>
<section id="step-4-the-decision-tree-but-make-it-fashionable-phase" class="level2">
<h2 class="anchored" data-anchor-id="step-4-the-decision-tree-but-make-it-fashionable-phase">Step 4: The “Decision Tree, But Make It Fashionable” Phase</h2>
<p>Alright, we’re in the endgame now. We’ve got our associations, we’ve got our transitive relationships, but we’re still missing something. We need a way to create diverse, interesting recommendation paths. Enter: The Recommendation Tree.</p>
<p>Think of this as a decision tree, but instead of decisions, we’re making recommendations. It’s like those “Choose Your Own Adventure” books, but for shopping. And let me tell you, customers love an adventure.</p>
<p>Let’s build our tree:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> BrandNode:</span>
<span id="cb5-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, brand):</span>
<span id="cb5-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.brand <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> brand</span>
<span id="cb5-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.children <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> build_recommendation_tree(associations, root_brand, depth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>):</span>
<span id="cb5-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> depth <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb5-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb5-9">    </span>
<span id="cb5-10">    root <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BrandNode(root_brand)</span>
<span id="cb5-11">    associated <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(associations[root_brand].items(), key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb5-12">    </span>
<span id="cb5-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> brand, _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> associated[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Limit to top 3 associations for simplicity</span></span>
<span id="cb5-14">        child <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> build_recommendation_tree(associations, brand, depth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> child:</span>
<span id="cb5-16">            root.children.append(child)</span>
<span id="cb5-17">    </span>
<span id="cb5-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> root</span>
<span id="cb5-19"></span>
<span id="cb5-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> traverse_tree(root, path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb5-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> path <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb5-22">        path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb5-23">    </span>
<span id="cb5-24">    path.append(root.brand)</span>
<span id="cb5-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">yield</span> path</span>
<span id="cb5-26">    </span>
<span id="cb5-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> child <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> root.children:</span>
<span id="cb5-28">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">yield</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">from</span> traverse_tree(child, path.copy())</span>
<span id="cb5-29"></span>
<span id="cb5-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Build and traverse the tree</span></span>
<span id="cb5-31">root_brand <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Nike"</span></span>
<span id="cb5-32">rec_tree <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> build_recommendation_tree(transitive_associations, root_brand)</span>
<span id="cb5-33"></span>
<span id="cb5-34"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Recommendation paths:"</span>)</span>
<span id="cb5-35"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> path <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> traverse_tree(rec_tree):</span>
<span id="cb5-36">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" -&gt; "</span>.join(path))</span></code></pre></div>
<p>Now, why is this tree structure so powerful? Let me tell you a tale of two customers.</p>
<p>Customer A comes to your site and buys a pair of Nike sneakers. You recommend Adidas (because they’re often bought together). They’re not interested. In a simple system, you might be stuck. But with our tree, you can pivot. You might go Nike -&gt; Under Armour -&gt; Puma. Suddenly, you’ve opened up a new branch of possibilities.</p>
<p>Customer B also buys Nike, but they’re more adventurous. They follow the path Nike -&gt; Adidas -&gt; Puma -&gt; Reebok. Each step is a new discovery, each purchase reinforcing their trust in your recommendations.</p>
<p>I implemented a system like this for a large outdoor equipment retailer. The result? A 30% increase in customer lifetime value. Why? Because we weren’t just selling products; we were creating shopping journeys.</p>
<p>You still don’t believe me that the tree structure is powerful? Well let me give you a real-world example from the fashion industry. Stitch Fix, the online personal styling service, uses a sophisticated recommendation system that incorporates elements similar to our tree structure. According to their technology blog, they don’t just recommend individual items; they create entire outfits and style journeys for their customers. For instance, a customer might start with a basic pair of jeans. The system might then recommend a casual shirt (first level of the tree), followed by a jacket that complements both (second level), and finally accessories that pull the whole outfit together (third level). This creates a guided shopping experience that not only increases sales but also enhances customer satisfaction and loyalty. Their approach has been so successful that it’s become a core part of their business model, allowing them to compete effectively in the crowded fashion e-commerce space.</p>
</section>
<section id="the-secret-sauce-continuous-improvement" class="level2">
<h2 class="anchored" data-anchor-id="the-secret-sauce-continuous-improvement">The Secret Sauce: Continuous Improvement</h2>
<p>Now, here’s the part that separates the amateurs from the pros. Everything we’ve built so far? It’s just the beginning. The real magic happens when you start iterating.</p>
<ol type="1">
<li><p><strong>Fine-tune your clustering:</strong> As you gather more data, you might realize that “price” isn’t as important as “style” in grouping brands. Don’t be afraid to adjust your features.</p></li>
<li><p><strong>Adjust association weights:</strong> Maybe being bought together in the same cart should be weighted more heavily than being bought by the same customer on different days. Experiment!</p></li>
<li><p><strong>Play with tree depth:</strong> A deeper tree might create more interesting paths, but it might also lead to decision fatigue. Find the sweet spot for your customers.</p></li>
<li><p><strong>Incorporate user feedback:</strong> If a customer consistently ignores a certain brand in their recommendations, take the hint!</p></li>
<li><p><strong>A/B test everything:</strong> And I mean everything. Different clustering algorithms, different association models, different tree traversal methods. Let the data guide you.</p></li>
</ol>
<p>Remember, the goal isn’t to build a perfect system. The goal is to build a system that’s better than random chance, and then make it a little better every single day. How you ask? Well that’s the topic of another post…</p>
</section>
<section id="the-plot-thickens-a-teaser-for-the-sequel" class="level2">
<h2 class="anchored" data-anchor-id="the-plot-thickens-a-teaser-for-the-sequel">The Plot Thickens: A Teaser for the Sequel</h2>
<p>Now, if you think we’ve reached the pinnacle of recommendation wizardry, hold onto your pocket protectors, folks. We’re about to dive deeper into the rabbit hole of personalization than Alice ever dreamed possible. In our next thrilling installment, we’ll be cooking up a recommendation system so bespoke, it’ll make Savile Row tailors jealish. We’re talking about harnessing the power of cutting-edge AI to create personalized purchase sequences that’ll make your customers feel like you’re reading their minds (in a totally non-creepy, GDPR-compliant way, of course).</p>
<p>Think less “Customers who bought this also bought…” and more “Your next favorite purchase is just around the corner.” It’s like if your favorite personal shopper got bitten by a radioactive data scientist and developed super-powered prediction abilities. Intrigued? Excited? Contemplating a career change to data science? Stay tuned for Part 2, where we’ll turn your recommendation engine from a skilled matchmaker into a retail fortune teller. Don’t forget to bring your lucky algorithms!</p>


</section>

 ]]></description>
  <category>recommenders</category>
  <category>code</category>
  <guid>https://shwetank-kumar.github.io/posts/cold-start/</guid>
  <pubDate>Sat, 24 Aug 2024 07:00:00 GMT</pubDate>
  <media:content url="https://shwetank-kumar.github.io/posts/cold-start/recommender-system-diagram.svg" medium="image" type="image/svg+xml"/>
</item>
<item>
  <title>Post With Code</title>
  <dc:creator>Shwetank Kumar</dc:creator>
  <link>https://shwetank-kumar.github.io/posts/post-with-code/</link>
  <description><![CDATA[ 





<p>This is a post with executable code.</p>



 ]]></description>
  <category>news</category>
  <category>code</category>
  <category>analysis</category>
  <guid>https://shwetank-kumar.github.io/posts/post-with-code/</guid>
  <pubDate>Sat, 17 Aug 2024 07:00:00 GMT</pubDate>
  <media:content url="https://shwetank-kumar.github.io/posts/post-with-code/image.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Welcome To My Blog</title>
  <dc:creator>Shwetank Kumar</dc:creator>
  <link>https://shwetank-kumar.github.io/posts/welcome/</link>
  <description><![CDATA[ 





<p>This is the first post in a Quarto blog. Welcome!</p>
<p><img src="https://shwetank-kumar.github.io/posts/welcome/thumbnail.jpg" class="img-fluid"></p>
<p>Since this post doesn’t specify an explicit <code>image</code>, the first image in the post will be used in the listing page of posts.</p>



 ]]></description>
  <category>news</category>
  <guid>https://shwetank-kumar.github.io/posts/welcome/</guid>
  <pubDate>Wed, 14 Aug 2024 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Blog</title>
  <link>https://shwetank-kumar.github.io/blog.html</link>
  <description><![CDATA[ 









<div class="quarto-listing quarto-listing-container-default" id="listing-listing">
<div class="list quarto-listing-default">
<div class="quarto-post image-right" data-index="0" data-categories="recommenders,code" data-listing-date-sort="1724482800000" data-listing-file-modified-sort="1724610614569" data-listing-date-modified-sort="NaN" data-listing-reading-time-sort="17" data-listing-word-count-sort="3218">
<div class="thumbnail">
<p><a href="./posts/cold-start/index.html" class="no-external"></a></p><a href="./posts/cold-start/index.html" class="no-external">
<p><img loading="lazy" src="https://shwetank-kumar.github.io/posts/cold-start/recommender-system-diagram.svg" class="thumbnail-image"></p>
</a><p><a href="./posts/cold-start/index.html" class="no-external"></a></p>
</div>
<div class="body">
<h3 class="no-anchor listing-title">
<a href="./posts/cold-start/index.html" class="no-external">The Surprisingly Lucrative Journey of Bootstrapping a Brand Recommender System: From Chaos to Cash</a>
</h3>
<div class="listing-subtitle">
<a href="./posts/cold-start/index.html" class="no-external"></a>
</div>
<div class="listing-categories">
<div class="listing-category" onclick="window.quartoListingCategory('recommenders'); return false;">
recommenders
</div>
<div class="listing-category" onclick="window.quartoListingCategory('code'); return false;">
code
</div>
</div>
<div class="listing-description">
<a href="./posts/cold-start/index.html" class="no-external"><!-- desc(5A0113B34292)[max=175]:posts/cold-start/index.html --></a>
</div>
</div>
<div class="metadata">
<a href="./posts/cold-start/index.html" class="no-external">
<div class="listing-date">
Aug 24, 2024
</div>
<div class="listing-author">
Shwetank Kumar
</div>
</a>
</div>
</div>
<div class="quarto-post image-right" data-index="1" data-categories="recommenders,code" data-listing-date-sort="1724482800000" data-listing-file-modified-sort="1724530874016" data-listing-date-modified-sort="NaN" data-listing-reading-time-sort="1" data-listing-word-count-sort="32">
<div class="thumbnail">
<p><a href="./posts/sequence-model/index.html" class="no-external"></a></p><a href="./posts/sequence-model/index.html" class="no-external">
<p><img loading="lazy" src="https://shwetank-kumar.github.io/posts/sequence-model/image.jpg" class="thumbnail-image"></p>
</a><p><a href="./posts/sequence-model/index.html" class="no-external"></a></p>
</div>
<div class="body">
<h3 class="no-anchor listing-title">
<a href="./posts/sequence-model/index.html" class="no-external">How to augment that recommender system using sequence modeling</a>
</h3>
<div class="listing-subtitle">
<a href="./posts/sequence-model/index.html" class="no-external"></a>
</div>
<div class="listing-categories">
<div class="listing-category" onclick="window.quartoListingCategory('recommenders'); return false;">
recommenders
</div>
<div class="listing-category" onclick="window.quartoListingCategory('code'); return false;">
code
</div>
</div>
<div class="listing-description">
<a href="./posts/sequence-model/index.html" class="no-external"><!-- desc(5A0113B34292)[max=175]:posts/sequence-model/index.html --></a>
</div>
</div>
<div class="metadata">
<a href="./posts/sequence-model/index.html" class="no-external">
<div class="listing-date">
Aug 24, 2024
</div>
<div class="listing-author">
Shwetank Kumar
</div>
</a>
</div>
</div>
<div class="quarto-post image-right" data-index="2" data-categories="news,code,analysis" data-listing-date-sort="1723878000000" data-listing-file-modified-sort="1724008099544" data-listing-date-modified-sort="NaN" data-listing-reading-time-sort="1" data-listing-word-count-sort="7">
<div class="thumbnail">
<p><a href="./posts/post-with-code/index.html" class="no-external"></a></p><a href="./posts/post-with-code/index.html" class="no-external">
<p><img loading="lazy" src="https://shwetank-kumar.github.io/posts/post-with-code/image.jpg" class="thumbnail-image"></p>
</a><p><a href="./posts/post-with-code/index.html" class="no-external"></a></p>
</div>
<div class="body">
<h3 class="no-anchor listing-title">
<a href="./posts/post-with-code/index.html" class="no-external">Post With Code</a>
</h3>
<div class="listing-subtitle">
<a href="./posts/post-with-code/index.html" class="no-external"></a>
</div>
<div class="listing-categories">
<div class="listing-category" onclick="window.quartoListingCategory('news'); return false;">
news
</div>
<div class="listing-category" onclick="window.quartoListingCategory('code'); return false;">
code
</div>
<div class="listing-category" onclick="window.quartoListingCategory('analysis'); return false;">
analysis
</div>
</div>
<div class="listing-description">
<a href="./posts/post-with-code/index.html" class="no-external"><!-- desc(5A0113B34292)[max=175]:posts/post-with-code/index.html --></a>
</div>
</div>
<div class="metadata">
<a href="./posts/post-with-code/index.html" class="no-external">
<div class="listing-date">
Aug 17, 2024
</div>
<div class="listing-author">
Shwetank Kumar
</div>
</a>
</div>
</div>
<div class="quarto-post image-right" data-index="3" data-categories="news" data-listing-date-sort="1723618800000" data-listing-file-modified-sort="1724008099544" data-listing-date-modified-sort="NaN" data-listing-reading-time-sort="1" data-listing-word-count-sort="32">
<div class="thumbnail">
<p><a href="./posts/welcome/index.html" class="no-external"></a></p><a href="./posts/welcome/index.html" class="no-external">
<!-- img(9CEB782EFEE6)[progressive=false, height=]:listing:posts/welcome/index.html -->
</a><p><a href="./posts/welcome/index.html" class="no-external"></a></p>
</div>
<div class="body">
<h3 class="no-anchor listing-title">
<a href="./posts/welcome/index.html" class="no-external">Welcome To My Blog</a>
</h3>
<div class="listing-subtitle">
<a href="./posts/welcome/index.html" class="no-external"></a>
</div>
<div class="listing-categories">
<div class="listing-category" onclick="window.quartoListingCategory('news'); return false;">
news
</div>
</div>
<div class="listing-description">
<a href="./posts/welcome/index.html" class="no-external"><!-- desc(5A0113B34292)[max=175]:posts/welcome/index.html --></a>
</div>
</div>
<div class="metadata">
<a href="./posts/welcome/index.html" class="no-external">
<div class="listing-date">
Aug 14, 2024
</div>
<div class="listing-author">
Shwetank Kumar
</div>
</a>
</div>
</div>
</div>
<div class="listing-no-matching d-none">
No matching items
</div>
</div> ]]></description>
  <guid>https://shwetank-kumar.github.io/blog.html</guid>
  <pubDate>Sun, 25 Aug 2024 18:33:19 GMT</pubDate>
</item>
<item>
  <title></title>
  <link>https://shwetank-kumar.github.io/favorite-eggheads.html</link>
  <description><![CDATA[ 




<section id="favorite-topics-and-experts" class="level2">

<ul>
<li>AI tutorials - Andrej Karpathy</li>
<li>Public company valuations - Ashwath Damodaran</li>
<li>Financial systems - Patrick McKenzie</li>
</ul>


</section>

 ]]></description>
  <guid>https://shwetank-kumar.github.io/favorite-eggheads.html</guid>
  <pubDate>Sun, 25 Aug 2024 18:33:19 GMT</pubDate>
</item>
</channel>
</rss>
